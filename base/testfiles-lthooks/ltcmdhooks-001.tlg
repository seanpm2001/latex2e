This is a generated file for the l3build validation system.
Don't change this file in any respect.
-> Adding cmd hook to 'foo' (before):
-> Add generic cmd hook for foo (before).
! In the preamble: delaying.
**** Add to hook cmd/foo/before (x) on input line ... <- before 1 
-> Adding cmd hook to 'foo' (after):
-> Add generic cmd hook for foo (after).
! In the preamble: delaying.
**** Add to hook cmd/foo/after (x) on input line ... <- after 1 
**** Add to hook cmd/foo/before (y) on input line ... <- before 2 
**** Add to hook cmd/foo/after (y) on input line ... <- after 2 
Update code for hook 'cmd/foo/before' on input line ...:
Code labels for sorting:
 x and y
Data structure for label rules:
 x = 0 -> 
 y = 0 -> 
Handled code for x
Handled code for y
-> The generic hook 'cmd/foo/before':
> Code chunks:
>     x -> before 1 
>     y -> before 2 
> Document-level (top-level) code (executed last):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order:
>     x, y.
<recently read> }
l. ...\ShowHook{cmd/foo/before}
Update code for hook 'cmd/foo/after' on input line ...:
Code labels for sorting:
 x and y
Data structure for label rules:
 x = 0 -> 
 y = 0 -> 
Handled code for x
Handled code for y
-> The generic hook 'cmd/foo/after':
> Code chunks:
>     x -> after 1 
>     y -> after 2 
> Document-level (top-level) code (executed first):
>     ---
> Extra code for next invocation:
>     ---
> Rules:
>     ---
> Execution order (after reversal):
>     y, x.
<recently read> }
l. ...\ShowHook{cmd/foo/after}
> \foo=\long macro:
#1#2->FOO #1 #2.
l. ...\show\foo
> \@kernel@after@begindocument=macro:
->\prop_map_inline:Nn \l_keys_usage_preamble_prop {\clist_map_inline:nn {##2}{\keys_define:nn {##1}{####1.code:n=\msg_error:nnn {keys}{preamble-only}{####1}}}}\__hook_cmd_begindocument_code: \bool_gset_true:N \g__pdf_init_bool .
l. ...\show\@kernel@after@begindocument
Update code for hook 'para/before' on input line ...:
Update code for hook 'para/after' on input line ...:
Update code for hook 'para/begin' on input line ...:
Update code for hook 'para/end' on input line ...:
Update code for hook 'begindocument' on input line ...:
Update code for hook 'begindocument/before' on input line ...:
Update code for hook 'begindocument/end' on input line ...:
Update code for hook 'include/before' on input line ...:
Update code for hook 'include/end' on input line ...:
Update code for hook 'include/after' on input line ...:
Update code for hook 'selectfont' on input line ...:
Update code for hook 'rmfamily' on input line ...:
Update code for hook 'sffamily' on input line ...:
Update code for hook 'ttfamily' on input line ...:
Update code for hook 'normalfont' on input line ...:
Update code for hook 'expand@font@defaults' on input line ...:
Update code for hook 'bfseries' on input line ...:
Update code for hook 'bfseries/defaults' on input line ...:
Update code for hook 'mdseries' on input line ...:
Update code for hook 'mdseries/defaults' on input line ...:
Update code for hook 'enddocument' on input line ...:
Update code for hook 'enddocument/afterlastpage' on input line ...:
Update code for hook 'enddocument/afteraux' on input line ...:
Update code for hook 'enddocument/info' on input line ...:
  normal rule kernel/warnings|kernel/filelist: > found
Code labels for sorting:
 kernel/filelist and kernel/warnings
Data structure for label rules:
 kernel/filelist = 0 -> kernel/warnings
 kernel/warnings = 1 -> 
Handled code for kernel/filelist
Handled code for kernel/warnings
Update code for hook 'enddocument/end' on input line ...:
Update code for hook 'package/before' on input line ...:
Update code for hook 'class/before' on input line ...:
Update code for hook 'package/after' on input line ...:
Update code for hook 'class/after' on input line ...:
Update code for hook 'file/before' on input line ...:
Update code for hook 'file/after' on input line ...:
Update code for hook 'shipout/before' on input line ...:
Update code for hook 'shipout/after' on input line ...:
Update code for hook 'shipout/foreground' on input line ...:
Update code for hook 'shipout/background' on input line ...:
Update code for hook 'shipout/firstpage' on input line ...:
Code labels for sorting:
 l3backend
Data structure for label rules:
 l3backend = 0 -> 
Handled code for l3backend
Update code for hook 'shipout/lastpage' on input line ...:
Update code for hook 'file/biditools.sty/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'file/dinbrief.cls/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'file/pgfpages.sty/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'file/pgfmorepages.sty/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'file/bigfoot.sty/after' on input line ...:
Update code for hook 'file/ulem.sty/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'file/varwidth.sty/after' on input line ...:
Code labels for sorting:
 firstaid
Data structure for label rules:
 firstaid = 0 -> 
Handled code for firstaid
Update code for hook 'cmd/foo/before' on input line ...:
Code labels for sorting:
 x and y
Data structure for label rules:
 x = 0 -> 
 y = 0 -> 
Handled code for x
Handled code for y
Update code for hook 'cmd/foo/after' on input line ...:
Code labels for sorting:
 x and y
Data structure for label rules:
 x = 0 -> 
 y = 0 -> 
Handled code for x
Handled code for y
All initialized (non-empty) hooks:
 enddocument/info -> \@dofilelist \@enddocument@kernel@warnings \__hook_toplevel enddocument/info \__hook_next enddocument/info  
 shipout/firstpage -> \__kernel_backend_literal:n {header=l3backend-dvips.pro}\__hook_toplevel shipout/firstpage \__hook_next shipout/firstpage  
 file/biditools.sty/after -> \__hook_toplevel file/biditools.sty/after \FirstAidNeededT {biditools}{sty}{....-..-.. v... Programming tools for bidi package}{\def \firstaid@bidi@document@patch \endgroup ##1\begingroup ##2\firstaid@bidi@document@patch {\unexpanded {##1##2}}\edef \document {\expandafter \firstaid@bidi@document@patch \document \firstaid@bidi@document@patch }\AddToHook {enddocument/info}{\let \bidi@AfterEndDocumentCheckLabelsRerun \@firstofone \bidi@afterenddocumentchecklabelsrerunhook }}\__hook_next file/biditools.sty/after  
 file/dinbrief.cls/after -> \__hook_toplevel file/dinbrief.cls/after \FirstAidNeededT {dinbrief}{cls}{....-..-.. LaTeX2e class}{\AddToHook {env/document/begin}{\begingroup }}\__hook_next file/dinbrief.cls/after  
 file/pgfpages.sty/after -> \__hook_toplevel file/pgfpages.sty/after \cs_gset_eq:NN \shipout \pgfpages@originalshipout \cs_set_eq:NN \pgfpages@originalshipout \tex_shipout:D \cs_set_eq:NN \tex_shipout:D \pgfpages@interceptshipout \__hook_next file/pgfpages.sty/after  
 file/pgfmorepages.sty/after -> \__hook_toplevel file/pgfmorepages.sty/after \cs_set_nopar:Npn \pgfhookintoshipout {\cs_set_eq:NN \pgfpages@originalshipout \tex_shipout:D \cs_set_eq:NN \tex_shipout:D \pgfpages@interceptshipout }\__hook_next file/pgfmorepages.sty/after  
 file/ulem.sty/after -> \__hook_toplevel file/ulem.sty/after \def \@hspace ##1{\begingroup \setlength \skip@ {##1}\edef \x {\endgroup \hskip \the \skip@ \relax }\x }\__hook_next file/ulem.sty/after  
 file/varwidth.sty/after -> \__hook_toplevel file/varwidth.sty/after \FirstAidNeededT {varwidth}{sty}{....-..-.. ver 0.92; \space Variable-width minipages}{\def \@vwid@sift {\skip@ \lastskip \unskip \ifdim \lastskip =\z@ \unskip \fi \dimen@ \lastkern \unkern \count@ \lastpenalty \unpenalty \setbox \z@ \lastbox \ifvoid \z@ \advance \sift@deathcycles \@ne \else \sift@deathcycles \z@ \fi \ifnum \sift@deathcycles >33 \let \@vwid@sift \relax \PackageWarning {varwidth}{Failed to reprocess entire contents}\fi \ifnum \count@ =\@vwid@preeqp \@vwid@eqmodefalse \fi \ifnum \count@ =\@vwid@posteqp \@vwid@eqmodetrue \fi \ifnum \count@ =\@vwid@toppen \let \@vwid@sift \relax \else \ifnum \count@ =\@vwid@offsets \@vwid@setoffsets \else \ifnum \count@ =\@vwid@postw \else \@vwid@resetb \fi \@vwid@append \fi \fi \@vwid@sift }}\__hook_next file/varwidth.sty/after  
 cmd/foo/before -> before 1 before 2 \__hook_toplevel cmd/foo/before \__hook_next cmd/foo/before  
 cmd/foo/after -> \__hook_toplevel cmd/foo/after after 2 after 1 \__hook_next cmd/foo/after  
No file ltcmdhooks-001.aux.
LaTeX Font Info:    Checking defaults for OML/cmm/m/it on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OMS/cmsy/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OT1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for T1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for TS1/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for OMX/cmex/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
LaTeX Font Info:    Checking defaults for U/cmr/m/n on input line ....
LaTeX Font Info:    ... okay on input line ....
-> \begin{document} try cmd/foo/before.
[lthooks] analyzing '\foo'
[lthooks] \foo=\long macro:#1#2->FOO #1 #2
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
-> \begin{document} try cmd/foo/after.
[lthooks] analyzing '\foo'
[lthooks] \foo=\long macro:#1#2->\UseHook {cmd/foo/before}FOO #1 #2
[lthooks] ++ control sequence is defined
[lthooks] ++ control sequence is a macro
[lthooks] ++ macro is not private
[lthooks] .. command can only be patched by rescanning
[lthooks] ++ trying to patch by retokenization
[lthooks] ++ macro can be retokenized cleanly
[lthooks] == retokenizing macro now
> \foo=\long macro:
#1#2->\UseHook {cmd/foo/before}FOO #1 #2\UseHook {cmd/foo/after}.
l. ...\show\foo
before 1 before 2 FOO hello world after 2 after 1 
-> Adding cmd hook to 'baz' (before):
[lthooks] analyzing '\baz'
[lthooks] \baz=\relax
! LaTeX hooks Error: Generic hooks cannot be added to '\baz'.
For immediate help type H <return>.
 ...                                              
l. ...\AddToHook{cmd/baz/before}{error}
You tried to add a hook to '\baz', but LaTeX was unable to patch the command
because it doesn't exist.
**** Add to hook cmd/baz/before (top-level) on input line ... <- error
Update code for hook 'cmd/baz/before' on input line ...:
